pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')  // AWS Access Key from Jenkins Credentials
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')  // AWS Secret Key from Jenkins Credentials
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo 'Cloning repository...'
                    git branch: 'main', url: 'https://github.com/Manjyyot/TerraformTravelmemory.git'
                }
            }
        }

        stage('Setup AWS Credentials') {
            steps {
                script {
                    echo 'Configuring AWS credentials...'
                    withEnv(["AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}", "AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                        sh 'aws sts get-caller-identity'  // Verify AWS credentials
                    }
                }
            }
        }

        stage('Provision Infrastructure') {
            steps {
                withEnv(["AWS_REGION=${AWS_REGION}"]) {
                    sh '''
                    cd terraform
                    terraform init
                    terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Retrieve Terraform Outputs') {
            steps {
                script {
                    def backend_ip = sh(script: "cd terraform && terraform output -raw backend_instance_ip", returnStdout: true).trim()
                    def frontend_ip = sh(script: "cd terraform && terraform output -raw frontend_instance_ip", returnStdout: true).trim()
                    def mongodb_ip = sh(script: "cd terraform && terraform output -raw mongodb_instance_ip", returnStdout: true).trim()

                    env.BACKEND_IP = backend_ip
                    env.FRONTEND_IP = frontend_ip
                    env.MONGODB_IP = mongodb_ip

                    echo "Backend IP: ${BACKEND_IP}"
                    echo "Frontend IP: ${FRONTEND_IP}"
                    echo "MongoDB IP: ${MONGODB_IP}"
                }
            }
        }

        stage('Deploy Backend') {
            steps {
                sshCommand remote: [host: env.BACKEND_IP, user: 'ubuntu', identityFile: 'newManjyyot.pem'], command: '''
                    sudo apt update -y
                    sudo apt install -y nodejs npm git
                    git clone https://github.com/Manjyyot/TerraformTravelmemory.git
                    cd TerraformTravelmemory/backend
                    echo "MONGO_URI=mongodb://${MONGODB_IP}:27017/mydb" > .env
                    echo "PORT=3000" >> .env
                    npm install
                    nohup node index.js > backend.log 2>&1 &
                '''
            }
        }

        stage('Deploy Frontend') {
            steps {
                sshCommand remote: [host: env.FRONTEND_IP, user: 'ubuntu', identityFile: 'newManjyyot.pem'], command: '''
                    sudo apt update -y
                    sudo apt install -y nodejs npm git
                    git clone https://github.com/Manjyyot/TerraformTravelmemory.git
                    cd TerraformTravelmemory/frontend
                    echo "export const API_URL = 'http://${BACKEND_IP}:3000';" > src/url.js
                    npm install
                    npm start &
                '''
            }
        }

        stage('Deploy MongoDB') {
            steps {
                sshCommand remote: [host: env.MONGODB_IP, user: 'ubuntu', identityFile: 'newManjyyot.pem'], command: '''
                    sudo apt update -y
                    sudo apt install -y mongodb
                    sudo systemctl start mongodb
                    sudo systemctl enable mongodb
                '''
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully! üéâ'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors. ‚ùå'
        }
    }
}
