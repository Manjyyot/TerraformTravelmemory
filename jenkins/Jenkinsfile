pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        TF_VAR_region = 'us-east-1'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/Manjyyot/TerraformTravelmemory.git', branch: 'main'
            }
        }

        stage('Setup AWS Credentials') {
            steps {
                withEnv([
                    "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}",
                    "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}",
                    "AWS_DEFAULT_REGION=${TF_VAR_region}"
                ]) {
                    sh 'aws sts get-caller-identity'
                }
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Retrieve Terraform Outputs') {
            steps {
                script {
                    dir('terraform') {
                        backend_ip = sh(script: "terraform output -raw backend_instance_ip", returnStdout: true).trim()
                        frontend_ip = sh(script: "terraform output -raw frontend_instance_ip", returnStdout: true).trim()
                        mongodb_ip = sh(script: "terraform output -raw mongodb_instance_ip", returnStdout: true).trim()
                    }
                    echo "Backend IP: ${backend_ip}"
                    echo "Frontend IP: ${frontend_ip}"
                    echo "MongoDB IP: ${mongodb_ip}"
                }
            }
        }

        stage('Deploy MongoDB') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'PEM_FILE')]) {
                    sshCommand remote: [
                        name: 'MongoDB Server',
                        host: mongodb_ip,
                        user: 'ubuntu',
                        identityFile: PEM_FILE,
                        allowAnyHosts: true
                    ], command: '''
                        chmod +x TerraformTravelmemory/scripts/mongodb_setup.sh
                        ./TerraformTravelmemory/scripts/mongodb_setup.sh
                    '''
                }
            }
        }

        stage('Deploy Backend') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'PEM_FILE')]) {
                    sshCommand remote: [
                        name: 'Backend Server',
                        host: backend_ip,
                        user: 'ubuntu',
                        identityFile: PEM_FILE,
                        allowAnyHosts: true
                    ], command: '''
                        chmod +x TerraformTravelmemory/scripts/backend_setup.sh
                        ./TerraformTravelmemory/scripts/backend_setup.sh
                    '''
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'PEM_FILE')]) {
                    sshCommand remote: [
                        name: 'Frontend Server',
                        host: frontend_ip,
                        user: 'ubuntu',
                        identityFile: PEM_FILE,
                        allowAnyHosts: true
                    ], command: '''
                        chmod +x TerraformTravelmemory/scripts/frontend_setup.sh
                        ./TerraformTravelmemory/scripts/frontend_setup.sh
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors.'
        }
    }
}
